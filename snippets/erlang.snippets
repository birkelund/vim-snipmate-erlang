# {{{ Headers

snippet head normal
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%% @doc
	%%   ${1}
	%% @end

	-module(`Filename()`).

	${2}

	%% vim: set et ts=2 sw=2:


snippet head large
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================

	-module(`Filename()`).

	${3}

	%% vim: set et ts=2 sw=2:


snippet head fun
	%%
	%% @doc
	%%   ${1:description}
	%% @end
	%%

# }}}

# {{{ Misc
# -module()
snippet mod
	-module(`Filename()`).

# -include()
snippet inc app
	-include_lib("${1:app}/include/${2:$1}.hrl").${3}
snippet inc ?MODULE.hrl
	-include("${1:`Filename("$1.hrl")`}").${3}

# -export()
snippet exp
	-export([${1:exports}]).${3}

# vsn
snippet vsn
	-vsn(${1:version})

# -import()
snippet imp general
	-import(${1:module}, [${2:func}/${3:arity}]).${4}
snippet imp lists
	-import(lists, [flatten/1, member/2, sort/1, map/2, foldl/3, foreach/2]).

# -define()
snippet def
	-define(${1:macro}, ${2:replace}).${3}

# -record()
snippet rec
	-record(${1:name}, {
		${2:field} :: ${3:type},
		${4:field} :: ${5:type}
	}).
# }}}

# {{{ Statements

# list comprehension
snippet lc list comprehension
	[ ${1:X} || $1 <- ${2:L} ]${3}
snippet lc map
	[ ${1:X} || $1 <- ${2:L} ]${3}

# Bit string comprehension
snippet lc bit string comprehension
	<< <<${1:X}>> || <<${2:$1}>> <= <<${3:expr}>> >>${4}

# list notation [H|T]
snippet ht
	[${1:H}|${2:T}]${3}

# lists:map()
snippet map
	lists:map(fun(${1:X}) -> $1 end, ${2:L})

# lists:foreach()
snippet for
	lists:foreach(fun(${1:X}) -> $1 end, ${2:L})

# io:format
snippet iof
	io:format("${1:string}~n", [${2:values}])${3}

# if
snippet if
	if
		${1:guard} ->
			${2:action}
	end

# case
snippet case
	case ${1:condition} of
		${2:pattern} ->
			${3:expr};
		${4:pattern} ->
			${5:expr}
	end${6}

# receive
snippet recv
	receive
		${1:pattern1} ->
			${2:expr1}
	end

# }}}

# {{{ OTP Templates

# {{{ Small server
snippet otp small server
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-export([start/0, init/1]).


	start() ->
		spawn(, init, [self()]).

	init(From) ->
		loop(From).

	loop(From) ->
		receive
			_ ->
				loop(From)
		end.



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ gen_server
snippet otp gen_server
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(gen_server).

	%% Public API
	%% ----------
	-export([start_link/0]).

	%% gen_server callbacks
	%% --------------------
	-export([
		init/1,
		handle_call/3,
		handle_cast/2,
		handle_info/2,
		terminate/2,
		code_change/3
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	%%
	%% @doc
	%%   Start the server
	%%
	%% @end
	%%
	start_link() ->
		gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).



	%%% ===========================================================================
	%%% gen_server callbacks
	%%% ===========================================================================

	init([]) ->
		{ok, #state{}}.


	handle_call(_Request, _From, State) ->
		Reply = ok,
		{reply, Reply, State}.


	handle_cast(_Msg, State) ->
		{noreply, State}.


	handle_info(_Info, State) ->
		{noreply, State}.


	terminate(_Reason, _State) ->
		ok.


	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2 sts=2:
# }}}

# {{{ gen_nb_server
snippet otp gen_nb_server
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(gen_nb_server).

	%% Public API
	%% ----------
	-export([
		start_link/0,
		add_listener/3,
		remove_listener/3
	]).

	%% gen_server callbacks
	%% --------------------
	-export([
		init/2,
		handle_call/3,
		handle_cast/2,
		handle_info/2,
		terminate/2,
		sock_opts/0,
		new_connection/4
	]).

	-define(SERVER, ?MODULE).


	%% ============================================================================
	%% Public API
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Start the server
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start_link() ->
		gen_nb_server:start_link(?MODULE, []).


	%% ============================================================================
	%% gen_server callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Initializes the server
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	init([], State) ->
		{ok, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Handling call messages
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_call({add_listener, IpAddr, Port}, _From, State) ->
		case gen_nb_server:add_listen_socket({IpAddr, Port}, State) of
			{ok, NewState} ->
				{reply, ok, NewState};
			Error ->
				{reply, Error, State}
		end;

	handle_call({remove_listener, IpAddr, Port}, _From, State) ->
		case gen_nb_server:remove_listen_socket({IpAddr, Port}, State) of
			{ok, NewState} ->
				{reply, ok, NewState};
			Error ->
				{reply, Error, State}
		end;

	handle_call(_Request, _From, State) ->
		{reply, ignored, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Handling cast messages
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_cast(_Msg, State) ->
		{noreply, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Handling all non call/cast messages
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_info(_Info, State) ->
		{noreply, State}.

	handle_info({tcp, Sock, Data}, State) ->
		Me = self(),
		P = spawn(fun() -> worker(Me, Sock, Data) end),
		gen_tcp:controlling_process(Sock, P),
		{noreply, State};


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called by a gen_server when it is about to terminate.
	%%   It should be the opposite of Module:init/1 and do any necessary cleaning
	%%   up. When it returns, the gen_server terminates with Reason. The return
	%%   value is ignored.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   sock_opts/0 is used by gen_nb_server to retrieve the set of socket
	%%   options to use when creating the listen socket. These options will also
	%%   be inherited by the client connection sockets. See the manpages for
	%%   gen_tcp and inet for more information on socket options.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	sock_opts() ->
		[binary, {active, once}, {packet, 0}].


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   new_connection/4 is called every time a new connection is accepted. It
	%%   is called with the newly connected socket and the server's current
	%%   state.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	new_connection(_IpAddr, _Port, Sock, State) ->
		Me = self(),
		P = spawn(fun() -> worker(Me, Sock) end),
		gen_tcp:controlling_process(Sock, P),
		{ok, State}.


	%% ============================================================================
	%% Internal functions
	%% ============================================================================

	worker(Owner, Sock) ->
		gen_tcp:send(Sock, "Hello\n"),
		inet:setopts(Sock, [{active, once}]),
		gen_tcp:controlling_process(Sock, Owner).

	worker(Owner, Sock, Data) ->
		gen_tcp:send(Sock, Data),
		inet:setopts(Sock, [{active, once}]),
		gen_tcp:controlling_process(Sock, Owner).


	%% vim: set et ts=2 sw=2:

# }}}

# {{{ gen_event
snippet otp gen_event
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(gen_event).

	%% Public API
	%% ----------
	-export([start_link/0, add_handler/0]).

	%% gen_event callbacks
	%% -------------------
	-export([
		init/1,
		handle_event/2,
		handle_call/2,
		handle_info/2,
		terminate/2,
		code_change/3
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).

	%% ============================================================================
	%% Public API
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Creates an event manager
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start_link() ->
		gen_event:start_link({local, ?SERVER}).


	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Adds an event handler
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	add_handler() ->
		gen_event:add_handler(?SERVER, ?MODULE, []).



	%% ============================================================================
	%% gen_event callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever a new event handler is added to an event manager, this function
	%%   is called to initialize the event handler.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	init([]) ->
		{ok, #state{}}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever an event manager receives an event sent using
	%%   gen_event:notify/2 or gen_event:sync_notify/2, this function is called
	%%   for each installed event handler to handle the event.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_event(_Event, State) ->
		{ok, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever an event manager receives a request sent using
	%%   gen_event:call/3,4, this function is called for the specified event
	%%   handler to handle the request.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_call(_Request, State) ->
		Reply = ok,
		{ok, Reply, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called for each installed event handler when an event
	%%   manager receives any other message than an event or a synchronous
	%%   request (or a system message).
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_info(_Info, State) ->
		{ok, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever an event handler is deleted from an event manager, this
	%%   function is called. It should be the opposite of Module:init/1 and do
	%%   any necessary cleaning up.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Convert process state when code is changed
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.



	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ gen_fsm
snippet otp gen_fsm
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(gen_fsm).

	%% Public API
	%% ----------
	-export([start_link/0]).

	%% gen_fsm callbacks
	%% -----------------
	-export([
		init/1,
		state_name/2,
		state_name/3,
		handle_event/3,
		handle_sync_event/4,
		handle_info/3,
		terminate/3,
		code_change/4
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%% ============================================================================
	%% Public API
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Creates a gen_fsm process which calls Module:init/1 to initialize. To
	%%   ensure a synchronized start-up procedure, this function does not return
	%%   until Module:init/1 has returned.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start_link() ->
		gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).



	%% ============================================================================
	%% gen_fsm callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever a gen_fsm is started using gen_fsm:start/[3,4] or
	%%   gen_fsm:start_link/[3,4], this function is called by the new process to
	%%   initialize.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	init([]) ->
		{ok, state_name, #state{}}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   There should be one instance of this function for each possible state
	%%   name. Whenever a gen_fsm receives an event sent using
	%%   gen_fsm:send_event/2, the instance of this function with the same name
	%%   as the current state name StateName is called to handle the event. It is
	%%   also called if a timeout occurs.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	state_name(_Event, State) ->
		{next_state, state_name, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   There should be one instance of this function for each possible state
	%%   name. Whenever a gen_fsm receives an event sent using
	%%   gen_fsm:sync_send_event/[2,3], the instance of this function with the
	%%   same name as the current state name StateName is called to handle the
	%%   event.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	state_name(_Event, _From, State) ->
		Reply = ok,
		{reply, Reply, state_name, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever a gen_fsm receives an event sent using
	%%   gen_fsm:send_all_state_event/2, this function is called to handle the
	%%   event.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_event(_Event, StateName, State) ->
		{next_state, StateName, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever a gen_fsm receives an event sent using
	%%   gen_fsm:sync_send_all_state_event/[2,3], this function is called to
	%%   handle the event.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_sync_event(_Event, _From, StateName, State) ->
		Reply = ok,
		{reply, Reply, StateName, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called by a gen_fsm when it receives any message other
	%%   than a synchronous or asynchronous event (or a system message).
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	handle_info(_Info, StateName, State) ->
		{next_state, StateName, State}.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called by a gen_fsm when it is about to terminate. It
	%%   should be the opposite of Module:init/1 and do any necessary cleaning
	%%   up. When it returns, the gen_fsm terminates with Reason. The return
	%%   value is ignored.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	terminate(_Reason, _StateName, _State) ->
		ok.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Convert process state when code is changed
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	code_change(_OldVsn, StateName, State, _Extra) ->
		{ok, StateName, State}.



	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ supervisor
snippet otp supervisor
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(supervisor).

	%% Public API
	%% ----------
	-export([start_link/0]).

	%% supervisor callbacks
	%% --------------------
	-export([init/1]).

	-define(SERVER, ?MODULE).


	%% ============================================================================
	%% API functions
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Starts the supervisor
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start_link() ->
		supervisor:start_link({local, ?SERVER}, ?MODULE, []).



	%% ============================================================================
	%% supervisor callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Whenever a supervisor is started using supervisor:start_link/[2,3], this
	%%   function is called by the new process to find out about restart
	%%   strategy, maximum restart frequency and child specifications.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	init([]) ->
		RestartStrategy = one_for_one,
		MaxRestarts = 1000,
		MaxSecondsBetweenRestarts = 3600,

		SupFlags = {RestartStrategy, MaxRestarts, MaxSecondsBetweenRestarts},

		Restart = permanent,
		Shutdown = 2000,
		Type = worker,

		AChild = {'AName', {'AModule', start_link, []},
			Restart, Shutdown, Type, ['AModule']},

		{ok, {SupFlags, [AChild]}}.

	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ supervisor bridge
snippet otp supervisor_bridge
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(supervisor_bridge).

	%% Public API
	%% ----------
	-export([start_link/0]).

	%% supervisor_bridge callbacks
	%% ---------------------------
	-export([init/1, terminate/2]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%% ============================================================================
	%% Public API
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @doc
	%%   Starts the supervisor bridge
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start_link() ->
		supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).



	%% ============================================================================
	%% supervisor_bridge callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   Creates a supervisor_bridge process, linked to the calling process,
	%%   which calls Module:init/1 to start the subsystem. To ensure a
	%%   synchronized start-up procedure, this function does not return until
	%%   Module:init/1 has returned.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	init([]) ->
		case 'AModule':start_link() of
		{ok, Pid} ->
			{ok, Pid, #state{}};
		Error ->
			Error
			end.


	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called by the supervisor_bridge when it is about to
	%%   terminate. It should be the opposite of Module:init/1 and stop the
	%%   subsystem and do any necessary cleaning up.The return value is ignored.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	terminate(Reason, State) ->
		'AModule':stop(),
		ok.



	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ application
snippet otp application
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	-behaviour(application).

	%% Application callbacks
	%% ---------------------
	-export([start/2, stop/1]).


	%% ============================================================================
	%% Application callbacks
	%% ============================================================================

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called whenever an application is started using
	%%   application:start/[1,2], and should start the processes of the
	%%   application. If the application is structured according to the OTP
	%%   design principles as a supervision tree, this means starting the top
	%%   supervisor of the tree.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	start(_StartType, _StartArgs) ->
		case 'TopSupervisor':start_link() of
		{ok, Pid} ->
			{ok, Pid};
		Error ->
			Error
			end.

	%% ----------------------------------------------------------------------------
	%% @private
	%% @doc
	%%   This function is called whenever an application has stopped. It is
	%%   intended to be the opposite of Module:start/2 and should do any
	%%   necessary cleaning up. The return value is ignored.
	%%
	%% @end
	%% ----------------------------------------------------------------------------
	stop(_State) ->
		ok.



	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ library
snippet otp library
	%% ============================================================================
	%% `Filename()` - ${1}
	%%
	%% @author `g:snips_author`, <`g:my_email_addr`>
	%% @copyright `strftime("%Y")`, `g:snips_author`
	%%
	%% @doc
	%%   ${2}
	%% @end
	%% ============================================================================
	-module(`Filename()`).

	%% Public API
	%% ----------
	-export([]).

	%% ============================================================================
	%% API
	%% ============================================================================



	%% ============================================================================
	%% Internal functions
	%% ============================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# }}}

# vim: set fen fdm=marker:
