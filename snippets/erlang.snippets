# {{{ Headers

snippet head normal
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%% @doc
	%%%   ${1}
	%%% @end

	-module(`Filename()`).

	${2}

	%% vim: set et ts=2 sw=2:


snippet head large
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================

	-module(`Filename()`).

	${3}

	%% vim: set et ts=2 sw=2:


snippet head fun
	%%
	%% @doc
	%%   ${1:description}
	%% @end
	%%

# }}}

# {{{ Misc
# -module()
snippet mod
	-module(`Filename()`).

# -include()
snippet inc app
	-include_lib("${1:app}/include/${2:$1}.hrl").${3}
snippet inc ?MODULE.hrl
	-include("${1:`Filename("$1.hrl")`}").${3}

# -export()
snippet exp
	-export([${1:exports}]).${3}

# vsn
snippet vsn
	-vsn(${1:version})

# -import()
snippet imp general
	-import(${1:module}, [${2:func}/${3:arity}]).${4}
snippet imp lists
	-import(lists, [flatten/1, member/2, sort/1, map/2, foldl/3, foreach/2]).

# -define()
snippet def
	-define(${1:macro}, ${2:replace}).${3}

# -record()
snippet rec
	-record(${1:name}, {
		${2:field} :: ${3:type},
		${4:field} :: ${5:type}
	}).
# }}}

# {{{ Statements

# list comprehension
snippet lc list comprehension
	[ ${1:X} || $1 <- ${2:L} ]${3}
snippet lc map
	[ ${1:X} || $1 <- ${2:L} ]${3}

# Bit string comprehension
snippet lc bit string comprehension
	<< <<${1:X}>> || <<${2:$1}>> <= <<${3:expr}>> >>${4}

# list notation [H|T]
snippet ht
	[${1:H}|${2:T}]${3}

# lists:map()
snippet map
	lists:map(fun(${1:X}) -> $1 end, ${2:L})

# lists:foreach()
snippet for
	lists:foreach(fun(${1:X}) -> $1 end, ${2:L})

# io:format
snippet iof
	io:format("${1:string}~n", [${2:values}])${3}

# if
snippet if
	if
		${1:guard} ->
			${2:action}
	end

# case
snippet case
	case ${1:condition} of
		${2:pattern} ->
			${3:expr};
		${4:pattern} ->
			${5:expr}
	end${6}

# receive
snippet recv
	receive
		${1:pattern1} ->
			${2:expr1}
	end

# }}}

# {{{ OTP Templates

# {{{ Small server
snippet otp small server
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-export([start/0, init/1]).


	start() ->
		spawn(, init, [self()]).

	init(From) ->
		loop(From).

	loop(From) ->
		receive
			_ ->
				loop(From)
		end.



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ gen_server
snippet otp gen_server
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(gen_server).

	%%% Public API
	%%% ----------
	-export([start_link/0]).

	%%% gen_server callbacks
	%%% --------------------
	-export([
		init/1,
		handle_call/3,
		handle_cast/2,
		handle_info/2,
		terminate/2,
		code_change/3
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	start_link() ->
		gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).



	%%% ===========================================================================
	%%% gen_server callbacks
	%%% ===========================================================================

	init([]) ->
		{ok, #state{}}.


	handle_call(_Request, _From, State) ->
		Reply = ok,
		{reply, Reply, State}.


	handle_cast(_Msg, State) ->
		{noreply, State}.


	handle_info(_Info, State) ->
		{noreply, State}.


	terminate(_Reason, _State) ->
		ok.


	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2 sts=2:
# }}}


# {{{ gen_event
snippet otp gen_event
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(gen_event).

	%%% Public API
	%%% ----------
	-export([start_link/0, add_handler/0]).

	%%% gen_event callbacks
	%%% -------------------
	-export([
		init/1,
		handle_event/2,
		handle_call/2,
		handle_info/2,
		terminate/2,
		code_change/3
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).

	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	start_link() ->
		gen_event:start_link({local, ?SERVER}).


	add_handler() ->
		gen_event:add_handler(?SERVER, ?MODULE, []).



	%%% ===========================================================================
	%%% gen_event callbacks
	%%% ===========================================================================

	init([]) ->
		{ok, #state{}}.


	handle_event(_Event, State) ->
		{ok, State}.


	handle_call(_Request, State) ->
		Reply = ok,
		{ok, Reply, State}.


	handle_info(_Info, State) ->
		{ok, State}.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ gen_fsm
snippet otp gen_fsm
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(gen_fsm).

	%%% Public API
	%%% ----------
	-export([start_link/0]).

	%%% gen_fsm callbacks
	%%% -----------------
	-export([
		init/1,
		state_name/2,
		state_name/3,
		handle_event/3,
		handle_sync_event/4,
		handle_info/3,
		terminate/3,
		code_change/4
	]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	start_link() ->
		gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).



	%%% ===========================================================================
	%%% gen_fsm callbacks
	%%% ===========================================================================

	init([]) ->
		{ok, state_name, #state{}}.


	state_name(_Event, State) ->
		{next_state, state_name, State}.


	state_name(_Event, _From, State) ->
		Reply = ok,
		{reply, Reply, state_name, State}.


	handle_event(_Event, StateName, State) ->
		{next_state, StateName, State}.


	handle_sync_event(_Event, _From, StateName, State) ->
		Reply = ok,
		{reply, Reply, StateName, State}.


	handle_info(_Info, StateName, State) ->
		{next_state, StateName, State}.


	terminate(_Reason, _StateName, _State) ->
		ok.


	code_change(_OldVsn, StateName, State, _Extra) ->
		{ok, StateName, State}.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ supervisor
snippet otp supervisor
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(supervisor).

	%%% Public API
	%%% ----------
	-export([start_link/0]).

	%%% supervisor callbacks
	%%% --------------------
	-export([init/1]).

	-define(SERVER, ?MODULE).


	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	start_link() ->
		supervisor:start_link({local, ?SERVER}, ?MODULE, []).



	%%% ===========================================================================
	%%% supervisor callbacks
	%%% ===========================================================================

	init([]) ->
		RestartStrategy = one_for_one,
		MaxRestarts = 1000,
		MaxSecondsBetweenRestarts = 3600,

		SupFlags = {RestartStrategy, MaxRestarts, MaxSecondsBetweenRestarts},

		Restart = permanent,
		Shutdown = 2000,
		Type = worker,

		AChild = {'AName', {'AModule', start_link, []},
			Restart, Shutdown, Type, ['AModule']},

		{ok, {SupFlags, [AChild]}}.

	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ supervisor bridge
snippet otp supervisor_bridge
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(supervisor_bridge).

	%%% Public API
	%%% ----------
	-export([start_link/0]).

	%%% supervisor_bridge callbacks
	%%% ---------------------------
	-export([init/1, terminate/2]).

	-define(SERVER, ?MODULE).

	-record(state, {}).


	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================

	start_link() ->
		supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).



	%%% ===========================================================================
	%%% supervisor_bridge callbacks
	%%% ===========================================================================

	init([]) ->
		case 'AModule':start_link() of
		{ok, Pid} ->
			{ok, Pid, #state{}};
		Error ->
			Error
			end.


	terminate(Reason, State) ->
		'AModule':stop(),
		ok.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ application
snippet otp application
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	-behaviour(application).

	%%% Application callbacks
	%%% ---------------------
	-export([start/2, stop/1]).


	%%% ===========================================================================
	%%% Application callbacks
	%%% ===========================================================================

	start(_StartType, _StartArgs) ->
		case 'TopSupervisor':start_link() of
		{ok, Pid} ->
			{ok, Pid};
		Error ->
			Error
			end.


	stop(_State) ->
		ok.



	%%% ===========================================================================
	%%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# {{{ library
snippet otp library
	%%% ===========================================================================
	%%% `Filename()` - ${1}
	%%%
	%%% @author `g:snips_author`, <`g:my_email_addr`>
	%%% @copyright `strftime("%Y")`, `g:snips_author`
	%%%
	%%% @doc
	%%%   ${2}
	%%% @end
	%%% ===========================================================================
	-module(`Filename()`).

	%%% Public API
	%%% ----------
	-export([]).

	%%% ===========================================================================
	%%% Public API
	%%% ===========================================================================



	%%% ===========================================================================
	%% Internal functions
	%%% ===========================================================================



	%% vim: set et ts=2 sw=2:
# }}}

# }}}

# vim: set fen fdm=marker:
